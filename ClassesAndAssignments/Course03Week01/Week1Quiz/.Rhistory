x <- 1
print(x)
x
runif()
runif(10)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
> x <- list(a = 1:5, b = rnorm(10))
x <- list(a = 1:5, b = rnorm(10))
sapply(x, mean)
str(apply)
x <- matrix(rnorm(200)), 20, 10)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x
x <- matrix(rnorm(200, 1, 10))
x
x <- matrix(rnorm(200, 1, 10, 5))
x <- matrix(rnorm(200, 0, 10))
x
x <- matrix(rnorm(200, min = 0, max = 10))
x
x <- matrix(runf(200, min = 0, max = 10), 20, 10)
x <- matrix(runif(200, min = 0, max = 10), 20, 10)
x
x <- matrix(floor(runif(200, min = 0, max = 10)), 20, 10)
x
hist(x)
hist(x[, 1])
hist(x[1,])
apply(x, 1, quantile, probs = c(0.25, 0.75))
str(quantile)
args('quantile')
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, range)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
airquality
library(datasets)
head(airquality)
datasets
?datasets
library(help = "datasets")
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x(, c("Ozone", "Solar.R", "Wind"))))
lapply(s, function(x) colMeans(x[], c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5,2)
f1
f2
interactions(f1, f2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
mean(z)
traceback()
debug(lm)
lm(y - x)
n
options(error = recover)
read.csv("lalala.csv")
library(datasets)
data("iris")
>iris
?iris
x <- data("iris")
x
x <- data(iris)
x
library(datasets)
iris <- data(iris)
iris
dnis <- dimnames(iris)
dnis
library(datasets)
iris <- data(iris)
head(iris)
library(datasets)
data(iris)
x <- data(iris)
q()
str(str)
source("cachematrix.T")
source("cachematrix.R")
str(lm)
str(source)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- gl(40, 20)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
s <- split(airquality, airquality$Month)
str(s)
summary(s)
x <- rnorm(10, 2, 1)
x
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na])
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3. 5. 7)]
x[c(3. 5. 7)]
x[3]
k <- c(3, 5, 7)
x[k]
x[c(3, 5 ,7)]
X[0]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
getwd()
setwd("..\\")
getwd()
list.files()
setwd("datasciencecoursera\\")
list.files()
setwd("Course03Week01\\")
dir.create("Week1Quiz")
list.files()
setwd("Week1Quiz")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", week1csv.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "week1csv.csv")
data <- read.csv("week1csv.csv")
head(data)
data2 <- data[, VAL>=1000000]
data2 <- data[, data$VAL>=1000000]
answer1 <- nrow(subset(data, VAL == 24))
answer1
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "dataset.xlsx!)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "dataset.xlsx")
data <- read.xlsx("dataset.xlsx")
library(xlsx)
library(xlsx)
dat <- read.xlsx(fname, 1, rowIndex = 18:23, colIndex = 7:15)
dataName <- "dataset.xlsx"
dat <- read.xlsx(dataName, 1, rowIndex = 18:23, colIndex = 7:15)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "dataset.xlsx")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "dataset.xlsx")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "dataset.xlsx")
dat <- read.xlsx(dataName, 1, rowIndex = 18:23, colIndex = 7:15)
dataName <- "NGAP.xlsx"
dat <- read.xlsx(dataName, 1, rowIndex = 18:23, colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
fname <- "restaurants.xml"
download_if_not_exists(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlParse(fname)
download.file(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", fname)
fname <- "restaurants.xml"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", fname)
doc <- xmlParse(fname)
library(XML)
doc <- xmlParse(fname)
answer4 <- length(xpathApply(doc, "//zipcode[text()='21231']", xmlValue))
answer4
fname <- "housing.csv"
download_if_not_exists(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT <- fread(input = fname, sep = ",")
funs <- list(
fun1 = function() { sapply(split(DT$pwgtp15,DT$SEX),mean) },
fun2 = function() { tapply(DT$pwgtp15,DT$SEX,mean) },
fun3 = function() { mean(DT$pwgtp15,by=DT$SEX) },
fun4 = function() { DT[,mean(pwgtp15),by=SEX] },
fun5 = function() { rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] },
fun6 = function() { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }
)
## set to FALSE if you want to remove verbose logs below
debug <- TRUE
fastest <- NULL
min <- .Machine$integer.max
lapply(funs, function(FUN) {
if (debug) print(FUN)
st <- system.time(x <- try(FUN(), silent = TRUE))
if (inherits(x, "try-error")) {
if(debug) print("run-time error, skipping..")
} else {
et <- st[3]
if (et < min) {
min <<- et
fastest <<- FUN
}
if (debug) {
print(paste("elapsed time:", sprintf("%.10f", et)))
print(x)
}
}
})
## The function 'mean(DT$pwgtp15,by=DT$SEX)' should be the fastest one.
print("The fastest calculation is:")
print(fastest)
msg("with running time of", sprintf("%.10f", min), "seconds")
fname <- "housing.csv"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", fname)
DT <- fread(input = fname, sep = ",")
funs <- list(
fun1 = function() { sapply(split(DT$pwgtp15,DT$SEX),mean) },
fun2 = function() { tapply(DT$pwgtp15,DT$SEX,mean) },
fun3 = function() { mean(DT$pwgtp15,by=DT$SEX) },
fun4 = function() { DT[,mean(pwgtp15),by=SEX] },
fun5 = function() { rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] },
fun6 = function() { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }
)
## set to FALSE if you want to remove verbose logs below
debug <- TRUE
fastest <- NULL
min <- .Machine$integer.max
lapply(funs, function(FUN) {
if (debug) print(FUN)
st <- system.time(x <- try(FUN(), silent = TRUE))
if (inherits(x, "try-error")) {
if(debug) print("run-time error, skipping..")
} else {
et <- st[3]
if (et < min) {
min <<- et
fastest <<- FUN
}
if (debug) {
print(paste("elapsed time:", sprintf("%.10f", et)))
print(x)
}
}
})
## The function 'mean(DT$pwgtp15,by=DT$SEX)' should be the fastest one.
print("The fastest calculation is:")
print(fastest)
msg("with running time of", sprintf("%.10f", min), "seconds")
library(data.table)
fname <- "housing.csv"
download_if_not_exists(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT <- fread(input = fname, sep = ",")
funs <- list(
fun1 = function() { sapply(split(DT$pwgtp15,DT$SEX),mean) },
fun2 = function() { tapply(DT$pwgtp15,DT$SEX,mean) },
fun3 = function() { mean(DT$pwgtp15,by=DT$SEX) },
fun4 = function() { DT[,mean(pwgtp15),by=SEX] },
fun5 = function() { rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] },
fun6 = function() { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }
)
## set to FALSE if you want to remove verbose logs below
debug <- TRUE
fastest <- NULL
min <- .Machine$integer.max
lapply(funs, function(FUN) {
if (debug) print(FUN)
st <- system.time(x <- try(FUN(), silent = TRUE))
if (inherits(x, "try-error")) {
if(debug) print("run-time error, skipping..")
} else {
et <- st[3]
if (et < min) {
min <<- et
fastest <<- FUN
}
if (debug) {
print(paste("elapsed time:", sprintf("%.10f", et)))
print(x)
}
}
})
## The function 'mean(DT$pwgtp15,by=DT$SEX)' should be the fastest one.
print("The fastest calculation is:")
print(fastest)
msg("with running time of", sprintf("%.10f", min), "seconds")''
library(data.table)
fname <- "housing.csv"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", fname)
DT <- fread(input = fname, sep = ",")
funs <- list(
fun1 = function() { sapply(split(DT$pwgtp15,DT$SEX),mean) },
fun2 = function() { tapply(DT$pwgtp15,DT$SEX,mean) },
fun3 = function() { mean(DT$pwgtp15,by=DT$SEX) },
fun4 = function() { DT[,mean(pwgtp15),by=SEX] },
fun5 = function() { rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] },
fun6 = function() { mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) }
)
## set to FALSE if you want to remove verbose logs below
debug <- TRUE
fastest <- NULL
min <- .Machine$integer.max
lapply(funs, function(FUN) {
if (debug) print(FUN)
st <- system.time(x <- try(FUN(), silent = TRUE))
if (inherits(x, "try-error")) {
if(debug) print("run-time error, skipping..")
} else {
et <- st[3]
if (et < min) {
min <<- et
fastest <<- FUN
}
if (debug) {
print(paste("elapsed time:", sprintf("%.10f", et)))
print(x)
}
}
})
## The function 'mean(DT$pwgtp15,by=DT$SEX)' should be the fastest one.
print("The fastest calculation is:")
print(fastest)
msg("with running time of", sprintf("%.10f", min), "seconds")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
