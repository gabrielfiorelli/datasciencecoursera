submit()
submit()
submit()
submit()
submit
submit()
d1 = date()
d
d1
d1 <- date()
d1
class(d1)
d1 <- Sys.Date()
d1 <- date()
d1
class(d1)
d2 <- Sys.Date()
d2
class(d2)
format(d2, "%a %b %d")
#Funciona com todas as funções de visualização de datas
#Transformar strings em datas:
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960"); z <- as.Date(x, "%d%b%Y")
z
#Verificar diferença de tempo entre datas:
z[1] - z[2]
as.numeric(z[1] - z[2])
weekdays(d2)
weekdays(z)
months(d2)
months(z)
library(lubridate)
install.packages("lubridate")
library(lubridate)
ymd("20170108")
ymd("20170108") #YearMonthDate
mdy("20170108") #MonthDayYear
ymd("20170108") #YearMonthDate
mdY("08/04/2017")
mdy("08/04/2017")
dmy("03-04-2017")
d = "2011-08-03 10:10:10"
ymd_hms(d)
ymd_hms(d, tz=)
ymd_hms(d, tz="Pacific/Auckland")
x <- dmy(c("1jan1960", "2jan1960", "31mar1960", "30jul1960"))
wday(x[1])
x <- dmy(c("1jan2013", "2jan2013", "31mar2013", "30jul2013"))
wday(x[1])
wday(x[1], label = TRUE)
swirl()
library(swirl)
swirl()
library(dataset)
par(mfrow = c(1, 2))
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
}
)
library(datasets)
par(mfrow = c(1, 2))
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
}
)
library(datasets)
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City, outer = true")
}
)
library(datasets)
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City, outer = true")
}
)
library(datasets)
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City, outer = TRUE")
}
)
library(datasets)
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality,
{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
}
)
x <- rnorm(100)
hist(x)
y <- rnotm(100)
y <- rnorm(100)
plot(x, y)
par(mar(2, 2, 2, 2))
par(mar = C(2, 2, 2, 2))
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch = 20)
example(points)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
library(Swirl)
library(swirl)
swirl()
head(airpolution)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color = 'blue')
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
library(swirl)
library(swirl)
swirl()
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
rug(low)
hist(low)
hist(low); rug(low)
hist(ppm, col = "green")
rug(low)
info()
low
high
hist(ppm, col = "green", breaks = 100)
library(swirl)
swirl()
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
pollution
names(pollution)
reg = pollution$region
reg <- pollution$region
reg <- table(pollution$region)
reg
library(swirl)
swirl()
barplot(reg, col = "wheat", main = ""Number of Counties in Each Region"")
barplot(reg, col = "wheat", main = Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = "pollution", col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region = "west")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(v = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region
)
plot(pollution$latitude, ppm, col = pollution$region
)
abline(h = 12, lwd =2, lty =2)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
head(mpg)
dim(mpg)
with(mpg, table(model))
table(mpg$model)
qplot(displ, hwy, data = "mpg")
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in
| New York City")
title(main = "Ozone and Wind in New York City")
par(length())
length(par())
names(par())
?para
?par
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month = 5)
may <- subset(airquality, Month == 5)
points()
points(may$Wind, may$Ozone, pch =  3, col = "solid blue")
points(may$Wind, may$Ozone, pch =  3, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", c(17, 8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
line(median(airquality$Wind), lty = 2, lwd = 2)
lines(median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,  main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R,  main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
library(lattice)
library(datasets)
airquality <- transform(airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(3,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
storedGraphic <- xyplot(Ozone ~ Wind, data = airq)
storedGraphic <- xyplot(Ozone ~ Wind, data = airquality)
print(storedGraphic)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group_1", "Group_2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...){})
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = meadian(y), lty = 2)
})
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group_1", "Group_2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...){
+     panel.xyplot(x, y, ...)
+     panel.abline(h = median(y), lty = 2)
+ })
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group_1", "Group_2"))
xyplot(y ~ x | f, layout = c(2,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group_1", "Group_2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
xyplot(y ~ x | f, layout = c(2,1), panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group_1", "Group_2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, layout = c(2,1), panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
library(ggplot2)
str(mpg)
library(ggplot2)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = dr)
qplot(displ, hwy, data = mpg, color = drv)
rm(list = ls())
library(ggplot2)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, why, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, fill = drv, binwidth = 20)
qplot(hwy, data = mpg, fill = drv, binwidth = 30)
qplot(hwy, data = mpg, fill = drv, binwidth = 3)
qplot(hwy, data = mpg, fill = drv, binwidth = 1)
qplot(hwy, data = mpg, fill = drv)
stat_bin()
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len = 10))
pal <- colorRampPalette(c("red, "blue""))
pal <- colorRampPalette(c("red", "blue"))
pal(2)
pal(10)
install.packages(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smothScatter(x, y)
smoothScatter(x, y)
plot(x, y, pch = 19)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19) # Com transparência. Os valores que se sobrepões acabam dando uma tonalidade mais escura aos dados tornando possível ver aonde existem mais informações.
y <- rnorm(100)
x <- rnorm(100)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19) # Com transparência. Os valores que se sobrepões acabam dando uma tonalidade mais escura aos dados tornando possível ver aonde existem mais informações.
x <- rnorm(1000)
y <- rnorm(1000)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19) # Com transparência. Os valores que se sobrepões acabam dando uma tonalidade mais escura aos dados tornando possível ver aonde existem mais informações.
# https://www.coursera.org/learn/exploratory-data-analysis/lecture/hVteM/air-pollution-case-study
# Air Pollution Case Study
#----------------------------------------#
#----------------------------------------#
# RESUMO
# A ideia é começar uma análise exploratória mostrando o básico.
# Isto nos mostrará como são os dados e o que poderemos fazer com eles.
#----------------------------------------#
#----------------------------------------#
# ASKING THE QUESTION
# Quando começamos a analisar os dados já temos uma ideia, mesmo que mais abrangente do que estamos buscando.
# Ela pode vir de uma pergunta mais abrangente ou já de uma hipótese que se queira testar.
# Os dados usados neste exemplo vieram do U.S. National Environmental Agency e envolve a medição de poluição do ar.
# Em especial o Fine Particulate Matter
# https://en.wikipedia.org/wiki/Particulates
## São particulas microscópicas, líquidas ou sólidas que ficam suspensam na atmosfera
## Elas tem efeito climáticos e também afetam vida humana.
## É basicamente um nome glamoroso para poeira.
## É uma preocupação medir estas partículas, porque elas estão presentes no ar que inalamos.
## Existe uma lei americana feita visando reduzir a poluição do ar.
## Então, uma das perguntas que temos interesse é: "A poluição do ar está menor agora do que antes?"
## Estes dados começaram a ser medidos em 1999 e são medidos até hoje.
## Então, olharemos os dados de 1999 e os dados de 2012 para tentar responder uma pergunta mais específica
## e possível de ser respondida com estes dados:
### A medições de poluição média do ar está menor em 2012 do que estava em 1999?
## Nota-se a diferença da segunda pergunta em relação a primeira.
## Ela já define o que será medido e qual será a comparação.
## É possível que para se chegar a esta pergunta, outras tenham sido respondidas anteriormente.
#----------------------------------------#
#----------------------------------------#
# ABRINDO E EXPLORANDO OS DADOS
# Limpando o ambiente
rm(list = ls())
# Set do diretório
setwd("C:/Users/gabriel.fiorelli/datasciencecoursera/ClassesAndAssignments/Course04Week04/CaseStudy_AirPollution")
library(dplyr)
# Listando os arquivos
list.files("Data/")
# Ler os arquivos
pm1 <- read.table("Data/RD_501_88101_1999-0.txt", comment.char = "#", header = FALSE, sep = "|", na.strings = "")
pm2 <- read.table("Data/RD_501_88101_2012-0.txt", comment.char = "#", header = FALSE, sep = "|", na.strings = "")
# Vendo linhas e dimensões
dim(pm1)
# Como o datasource está sem o nome das dimensões, pegamos a partir da primeira linha:
columnNames1 <- readLines("Data/RD_501_88101_1999-0.txt", 1)
columnNames2 <- readLines("Data/RD_501_88101_2012-0.txt", 1)
columnNames1 <- strsplit(columnNames1, "|", fixed = TRUE)
columnNames2 <- strsplit(columnNames2, "|", fixed = TRUE)
names(pm1) <- make.names(columnNames1[[1]])
names(pm2) <- make.names(columnNames2[[1]])
# Separando a variável que interessa
x1 <- pm1$Sample.Value
x2 <- pm2$Sample.Value
# Verificando a classe:
class(x1)
class(x2)
# Alguns resumos:
str(x1)
str(x2)
summary(x1)
summary(x2)
# Verificando a quantidade de Missing Values
mean(is.na(x1))
mean(is.na(x2))
#----------------------------------------#
#----------------------------------------#
# MISSING DATA
# Quando encontramos casos assim, devemos nos perguntar se isto (ter NA) é algo que precisamos nos preocupar.
# Por exemplo, no caso desta análise. Onde queremos saber se houve mudança entre 1999 e 2012:
## Ter dados faltante em alguns dias, ou algumas cidades é um problema?
# Ou sendo mais específico, quando já sabemos a quantidade de Missing Values:
## Ter 11% de dados faltantes, vai fazer grande diferença para esta resposta?
# Apesar de normalmente serem um grande inconveniente, dependerá de uma análise do problema para saber o quanto isto é ruim.
#----------------------------------------#
#----------------------------------------#
# COMPARANDO DADOS DE 1999 e 2012
summary(x1)
summary(x2)
# Tanto a mediana quanto a média são menores em 2012 do que eram em 1999.
# Em compensação o valor MAX é quase 6x maior em 2012. É um valor encontrado em outros países.
# Mas não observado normalmente nos EUA. O que pode indicar um erro de medição.
# Até aqui podemos dizer que aparentemente houve uma queda na quantidade de partículas PM2.5 ao longo dos anos.
mean(is.na(x1))
mean(is.na(x2))
# A quantidade de NA em 2012 também é menor. 11% em 1999 contra 5% em 2012.
boxplot(x1, x2)
# Mostra uma maior concentração mais próxima de 0 em ambos os datasets.
# No entanto, tem uma variedade muito maior em 2012.
boxplot(log10(x1), log10(x2))
# Com log10 fica um pouco mais fácil observar as caixas do gráfico.
# A linha da mediana reduz um pouco em 2012.
# Lembrando que, mesmo a diminuição nesta escala sendo pouca, por estar em log, a diferença real é maior.
# O variação dos dados em 2012 também fica mais clara em base 10.
#----------------------------------------#
#----------------------------------------#
# VALORES NEGATIVOS
# Na exploração feita até aqui, foi possível ver que em 2012 o dado mínimo é -10.
# A medição destes dados é feita usando um filtro, aonde as partículas são sugadas e a massa delas é medida.
# Então, não deveríamos ter valores negativos, porque não podemos ter massa negativa.
negativeValues <- x2 < 0
str(negativeValues)
sum(negativeValues, na.rm = TRUE)
# São 26474 valores negativos.
mean(negativeValues, na.rm = TRUE)
# Cerca de 2% dos resultados.
dates <- pm2$Date
str(dates)
# As datas estão criadas com valores inteiros.
dates <- as.Date(as.character(dates), "%Y%m%d")
str(dates)
# Agora as datas estão convertidas para o formato correto.
hist(dates, "month")
hist(dates[negativeValues], "month")
# Para fazer uma comparação mais direta, os dados usados serão da cidade de Nova Iorque.
# 1999
site1 <- unique(subset(pm1, State.Code == 36, c(County.Code, Site.ID)))
# 2012
site2 <- unique(subset(pm2, State.Code == 36, c(County.Code, Site.ID)))
# Criando variável agregando os dois valores. Dicionário.
# A ideia é conseguir comparar os resultado nos dois anos (1999 e 2012), no mesmo local.
# Só que vários lugares tem os dados coletados em 2012 mas não tinham em 1999.
site1 <- paste(site1[,1], site1[,2], sep = ".")
site2 <- paste(site2[,1], site2[,2], sep = ".")
intersection <- intersect(site1, site2)
str(site1)
str(site2)
str(intersection)
# Próximo passo é verificar quantas observações estão disponíveis em cada monitor.
# Uma nova variável criada, juntando os dados de cada linha.
pm1$County.Site <- with(pm1, paste(County.Code, Site.ID, sep = "."))
pm2$County.Site <- with(pm2, paste(County.Code, Site.ID, sep = "."))
# Outro jeito de chegar ao mesmo resultado. Usando dplyr.
# pm1 <- mutate(pm1, County.Site = paste(County.Code, Site.ID, sep = "."))
# pm2 <- mutate(pm2, County.Site = paste(County.Code, Site.ID, sep = "."))
# Separando somente os dados do estado de Nova Iorque
ny1 <- subset(pm1, State.Code == 36 & County.Site %in% intersection)
ny2 <- subset(pm2, State.Code == 36 & County.Site %in% intersection)
# Outro jeito de chegar ao mesmo resultado. Usando dplyr.
# ny1 <- filter(pm1, State.Code == 36 & County.Site %in% intersection)
# ny2 <- filter(pm2, State.Code == 36 & County.Site %in% intersection)
ny1
sapply(split(ny1, ny1$County.Site), nrow)
pm1sub <- subset(pm1, State.Code == 36 & County.Code == 63 && Site.ID == 2008)
pm2sub <- subset(pm2, State.Code == 36 & County.Code == 63 && Site.ID == 2008)
